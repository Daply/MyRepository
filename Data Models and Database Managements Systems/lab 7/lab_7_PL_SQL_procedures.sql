--1. Add a TAX column to the SALARY table to calculate the monthly income tax on salaries on a progressive scale. 
-- The tax is calculated according to the following rule:
-- - tax is equal to 9% of the salary accrued in the month, if the total salary from the beginning of the year to the end of the month in question does not exceed 20,000;
-- - tax is equal to 12% of the salary accrued in the month, if the total salary from the beginning of the year to the end of the month in question is more than 20,000, but does not exceed 30,000;
-- - tax is equal to 15% of the salary accrued in the month if the total salary from the beginning of the year to the end of the month in question is more than 30,000.

alter table SALARY add (TAX NUMBER (20));

--2. Make a program for calculating the tax and inserting it into the SALARY table:

--a) using a simple loop with a cursor and an if statement;

DECLARE 
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
	OPEN CUR_SALARY;
	LOOP
		FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
		EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		IF YEAR_SALARY = 20000 THEN
			UPDATE SALARY SET SALARY.TAX = 0.09 * CUR_SALARY_ROW.SALVALUE
			WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		IF YEAR_SALARY <= 30000 THEN
			UPDATE SALARY SET SALARY.TAX = 0.13 * CUR_SALARY_ROW.SALVALUE
			WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		IF YEAR_SALARY > 30000 THEN
			UPDATE SALARY SET SALARY.TAX = 0.16 * CUR_SALARY_ROW.SALVALUE
			WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
	CLOSE CUR_SALARY;
END;

--b) using a simple loop with a cursor and a case statement;	

	DECLARE 
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
	OPEN CUR_SALARY;
	LOOP
		FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
		EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		UPDATE SALARY SET SALARY.TAX =
		CASE
			WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
			WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
			ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
	CLOSE CUR_SALARY;
END;	

--c) using the cursor FOR loop;

	DECLARE 
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
		FOR CUR_SALARY_ROW IN CUR_SALARY
		LOOP
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		UPDATE SALARY SET SALARY.TAX =
		CASE
			WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
			WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
			ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
END;	

--d) using a cursor with a parameter, passing the number of the employee for whom the tax should be calculated.

	DECLARE 
	CURSOR CUR_SALARY(ID NUMBER) IS
		SELECT * FROM SALARY WHERE SALARY.EMPNO = ID FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
		FOR ID IN (SELECT EMPNO FROM EMP)
			LOOP
				OPEN CUR_SALARY(ID.EMPNO)
					LOOP
						FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
						EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
						SELECT SUM(SALVALUE) INTO YEAR_SALARY 
						WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
						UPDATE SALARY SET SALARY.TAX =
						CASE
							WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
							WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
							ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
						WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
						END LOOP;
				CLOSE CUR_SALARY;
			END LOOP;
		
END;			

--3. Draw up the programs (from the previous task) in the form of procedures.

--a) using a simple loop with a cursor and an if statement;

CREATE OR REPLACE PROCEDURE COUNT_TAXES AS
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
	OPEN CUR_SALARY;
	LOOP
		FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
		EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		IF YEAR_SALARY = 20000 THEN
			UPDATE SALARY SET SALARY.TAX = 0.09 * CUR_SALARY_ROW.SALVALUE
			WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		IF YEAR_SALARY <= 30000 THEN
			UPDATE SALARY SET SALARY.TAX = 0.13 * CUR_SALARY_ROW.SALVALUE
			WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		IF YEAR_SALARY > 3000 THEN
			UPDATE SALARY SET SALARY.TAX = 0.16 * CUR_SALARY_ROW.SALVALUE
			WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
	CLOSE CUR_SALARY;
END COUNT_TAXES;

--b) using a simple loop with a cursor and a case statement;	

CREATE OR REPLACE PROCEDURE COUNT_TAXES AS
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
	OPEN CUR_SALARY;
	LOOP
		FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
		EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		UPDATE SALARY SET SALARY.TAX =
		CASE
			WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
			WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
			ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
	CLOSE CUR_SALARY;
END COUNT_TAXES;	

--c) using the cursor FOR loop;

CREATE OR REPLACE PROCEDURE COUNT_TAXES AS
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
		FOR CUR_SALARY_ROW IN CUR_SALARY
		LOOP
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		UPDATE SALARY SET SALARY.TAX =
		CASE
			WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
			WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
			ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
END COUNT_TAXES;	

--d) using a cursor with a parameter, passing the number of the employee for whom the tax should be calculated.
 
CREATE OR REPLACE PROCEDURE COUNT_TAXES AS
	CURSOR CUR_SALARY(ID NUMBER) IS
		SELECT * FROM SALARY WHERE SALARY.EMPNO = ID FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
		FOR ID IN (SELECT EMPNO FROM EMP)
			LOOP
				OPEN CUR_SALARY(ID.EMPNO)
					LOOP
						FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
						EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
						SELECT SUM(SALVALUE) INTO YEAR_SALARY 
						WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
						UPDATE SALARY SET SALARY.TAX =
						CASE
							WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
							WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
							ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
						WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
						END LOOP;
				CLOSE CUR_SALARY;
			END LOOP;
		
END COUNT_TAXES;

-- 4. Create a function that calculates payroll tax for the entire period of accruals for a specific employee. 
--    Pass the tax percentage (up to 20,000, up to 30,000, above 30,000, employee number) as parameters.

CREATE OR REPLACE PROCEDURE compute_tax(below_2 NUMBER, below_3 NUMBER, above_3 NUMBER, emp_id NUMBER) AS
	CURSOR CUR_SALARY IS SELECT * FROM SALARY WHERE EMPNO = emp_id FOR UPDATE OF TAX;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	all_salary NUMBER(15);
BEGIN
	FOR ELEMENT IN CUR_SALARY
		LOOP
			SELECT SUM(SALVALUE) INTO all_salary FROM SALARY WHERE EMPNO = emp_id
            WHERE SALARY.EMPNO = ELEMENT.EMPNO AND MONTH <= ELEMENT.MONTH AND YEAR = ELEMENT.YEAR;
        UPDATE SALARY SET TAX =
            CASE
                WHEN all_salary <= 20000 THEN ELEMENT.SALVALUE * below_2
                WHEN all_salary <= 30000 THEN ELEMENT.SALVALUE * below_3
                ELSE ELEMENT.SALVALUE * above_3
            END
            WHERE EMPNO = ELEMENT.EMPNO AND MONTH = ELEMENT.MONTH AND YEAR = ELEMENT.YEAR;
    END LOOP;
    COMMIT;
END compute_tax;

BEGIN
compute_tax(0.09, 0.13, 0.16);
END

--5. Create a subroutine that calculates the total employee salary tax for the entire period of accruals. 
--   Pass the tax percentage (up to 20,000, up to 30,000, above 30,000, employee number) as parameters. The return value is the total tax.

CREATE OR REPLACE FUNCTION sum_tax(below_2 NUMBER, below_3 NUMBER, above_3 NUMBER, emp_id NUMBER) RETURN NUMBER AS
CURSOR CUR_SALARY IS SELECT * FROM SALARY WHERE EMPNO = emp_id;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	all_salary NUMBER(15);
	s_tax NUMBER(15);
BEGIN
	s_tax := 0;
	FOR ELEMENT IN CUR_SALARY
		LOOP
			SELECT SUM(SALVALUE) INTO all_salary FROM SALARY WHERE EMPNO = emp_id
            WHERE SALARY.EMPNO = ELEMENT.EMPNO AND MONTH <= ELEMENT.MONTH AND YEAR = ELEMENT.YEAR;
			s_tax := s_tax +
            CASE
                WHEN all_salary <= 20000 THEN ELEMENT.SALVALUE * below_2
                WHEN all_salary <= 30000 THEN ELEMENT.SALVALUE * below_3
                ELSE ELEMENT.SALVALUE * above_3
            END
    END LOOP;
	RETURN s_tax;
END;

SELECT  sum_tax(0.09, 0.13, 0.16, 85) FROM SALARY;

--6. Create a package that includes a procedure for calculating tax for all employees, a procedure for calculating taxes for an individual employee identified by his number, a function for calculating the total tax on an employee's salary for the entire period of accruals.

CREATE OR REPLACE PACKAGE TAX_COMPUTION AS
FUNCTION sum_tax(below_2 NUMBER, below_3 NUMBER, above_3 NUMBER, emp_id NUMBER) RETURN NUMBER;
PROCEDURE all_tax;
PROCEDURE emp_tax(ID NUMBER);
END TAX_COMPUTION;

CREATE OR REPLACE PACKAGE BODY TAX_COMPUTION AS

CREATE OR REPLACE PROCEDURE all_tax AS
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
		FOR CUR_SALARY_ROW IN CUR_SALARY
		LOOP
		SELECT SUM(SALVALUE) INTO YEAR_SALARY 
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
		UPDATE SALARY SET SALARY.TAX =
		CASE
			WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
			WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
			ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
		WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
		END LOOP;
END all_tax;	

CREATE OR REPLACE PROCEDURE emp_tax(ID NUMBER) AS
	CURSOR CUR_SALARY IS
		SELECT * FROM SALARY WHERE SALARY.EMPNO = ID FOR UPDATE;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	YEAR_SALARY NUMBER(15);
BEGIN
		FOR ID IN (SELECT EMPNO FROM EMP)
			LOOP
				OPEN CUR_SALARY(ID.EMPNO)
					LOOP
						FETCH CUR_SALARY_ROW INTO CUR_SALARY_ROW;
						EXIT WHEN CUR_SALARY_ROW%NOTFOUND;
						SELECT SUM(SALVALUE) INTO YEAR_SALARY 
						WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  >= SALARY.MONTH;
						UPDATE SALARY SET SALARY.TAX =
						CASE
							WHEN YEAR_SALARY = 20000 THEN 0.09 * CUR_SALARY_ROW.SALVALUE
							WHEN YEAR_SALARY <= 30000 THEN 0.13 * CUR_SALARY_ROW.SALVALUE
							ELSE 0.16 * CUR_SALARY_ROW.SALVALUE
						WHERE SALARY.EMPNO = CUR_SALARY_ROW.EMPNO AND CUR_SALARY_ROW.YEAR  = SALARY.YEAR AND  CUR_SALARY_ROW.MONTH  = SALARY.MONTH;
						END LOOP;
				CLOSE CUR_SALARY;
			END LOOP;
		
END emp_tax;

CREATE OR REPLACE FUNCTION sum_tax(below_2 NUMBER, below_3 NUMBER, above_3 NUMBER, emp_id NUMBER) RETURN NUMBER AS
CURSOR CUR_SALARY IS SELECT * FROM SALARY WHERE EMPNO = emp_id;
	CUR_SALARY_ROW CUR_SALARY%ROWTYPE;
	all_salary NUMBER(15);
	s_tax NUMBER(15);
BEGIN
	s_tax := 0;
	FOR ELEMENT IN CUR_SALARY
		LOOP
			SELECT SUM(SALVALUE) INTO all_salary FROM SALARY WHERE EMPNO = emp_id
            WHERE SALARY.EMPNO = ELEMENT.EMPNO AND MONTH <= ELEMENT.MONTH AND YEAR = ELEMENT.YEAR;
			s_tax := s_tax +
            CASE
                WHEN all_salary <= 20000 THEN ELEMENT.SALVALUE * below_2
                WHEN all_salary <= 30000 THEN ELEMENT.SALVALUE * below_3
                ELSE ELEMENT.SALVALUE * above_3
            END
    END LOOP;
	RETURN s_tax;
END sum_tax;

END TAX_COMPUTION;

BEGIN 
TAX_COMPUTION.all_tax;
END;

--7. Create a trigger to act when data is updated in the SALARY table. Namely, if the SALVALUE field is updated, then when a new salary is assigned that is less than the official salary (JOB table, MINSALARY field), the change is not made and the old value is saved, if the new salary value is higher than the official salary, then the change is made.

CREATE OR REPLACE TRIGGER salary_update
BEFORE UPDATE OF SALVALUE OF SALARY
FOR EACH ROW
DECLARE
    CURSOR CUR_SALARY(ID NUMBER) IS
        SELECT MINSALARY FROM JOB JOIN CAREER ON (JOB.JOBNO = CAREER.JOBNO) WHERE CAREER.ENDDATE IS NULL;
    cursol_sal_row JOB.MINSALARY%TYPE;
BEGIN
	OPEN CUR_SALARY(:NEW.EMPNO);
	FETCH CUR_SALARY INTO cursol_sal_row;
	IF :NEW.SALVALUE < cursol_sal_row.MINSALARY THEN :NEW.SALVALUE = :OLD.SALVALUE;
	END IF;
	CLOSE CUR_SALARY;
END;

--8. Create a trigger to act when a record is deleted from the CAREER table. If the ENDDATE field in the deleted row contains NULL, then the record is not deleted, otherwise it is deleted.

CREATE OR REPLACE TRIGGER career_delete
BEFORE DELETE ON CAREER
FOR EACH ROW
BEGIN
	IF :OLD.ENDDATE IS NULL THEN 
	DBMS_OUTPUT.PUT_LINE('No delete');
	RAISE_APPLICATION_ERROR( -20000, 'Deltion canceled!' );
    END IF;
END;

--9. Create a trigger to add or modify data in the EMP table. If the BIRTHDATE field in the inserted or modified row contains NULL, then the message ‘BERTHDATE is NULL’ should be displayed after the insertion or modification. If the BIRTHDATE field in the inserted or modified row contains a date earlier than ‘01 -01-1940 ’, then‘ PENTIONA ’should be returned. In the newly inserted line, the employee's name must be capitalized.

CREATE OR REPLACE TRIGGER birthdate_update
    BEFORE INSERT OR UPDATE ON EMP
    FOR EACH ROW
    BEGIN
        IF :NEW.BIRTHDATE is NULL THEN
            DBMS_OUTPUT.PUT_LINE('BIRTHDATE IS NULL');
        END IF;

        IF :NEW.BIRTHDATE < TO_DATE('01-01-1940', 'dd-mm-yyyy') THEN
            DBMS_OUTPUT.PUT_LINE('PENTIONA');
        END IF;

        :NEW.EMPNAME := UPPER(:NEW.EMPNAME);
    END;

--10. Create a program to change the type of a given variable from a character type (VARCHAR2) to a numeric type (NUMBER). The program must contain an exception handling section. The processing should be to issue the message ‘ERROR: argument is not a number’. An exception occurs when specifying a string as a number with a comma separating the fractional and integer parts.

CREATE OR REPLACE FUNCTION varchar_to_number(string VARCHAR2) RETURN NUMBER AS
    BEGIN
        RETURN TO_NUMBER(string);
    EXCEPTION
        WHEN VALUE_ERROR THEN
             DBMS_OUTPUT.PUT_LINE('ERROR: argument is not a number');
             RETURN NULL;
        WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20000, 'Unexpected error');
             RETURN NULL;
    END;